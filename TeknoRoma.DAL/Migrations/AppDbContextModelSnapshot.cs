// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TeknoRoma.DAL.DAL.Contexts;

#nullable disable

namespace TeknoRoma.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PersonelId")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("TcNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PersonelId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Birim", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Aciklama")
                        .HasColumnType("text");

                    b.Property<string>("BirimKodu")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Birimler");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Cari", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Adres")
                        .HasColumnType("text");

                    b.Property<decimal?>("Bakiye")
                        .HasColumnType("numeric");

                    b.Property<string>("CariHesapNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ilce")
                        .HasColumnType("text");

                    b.Property<string>("Sehir")
                        .HasColumnType("text");

                    b.Property<string>("SubeNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Cariler");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Departman", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartmanAdi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UstDepartmanId")
                        .HasColumnType("text");

                    b.Property<string>("UstId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UstDepartmanId");

                    b.ToTable("Departmanlar");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Depo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepoAdi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SubeId");

                    b.ToTable("Depolar");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Doviz", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DovizAdi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DovizKodu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Kur")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Dovizler");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Fatura", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CariId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FaturaTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("KDV")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ToplamTutar")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CariId");

                    b.ToTable("Faturalar");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.FaturaDetay", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FaturaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Fiyat")
                        .HasColumnType("double precision");

                    b.Property<int?>("Miktar")
                        .HasColumnType("integer");

                    b.Property<string>("StokId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FaturaId");

                    b.HasIndex("StokId");

                    b.ToTable("FaturaDetaylari");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Kasa", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double?>("Bakiye")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DovizId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KasaKodu")
                        .HasColumnType("text");

                    b.Property<string>("SubeKodu")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DovizId");

                    b.ToTable("Kasalar");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.KasaHareket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("Cikis")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DovizId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Giris")
                        .HasColumnType("numeric");

                    b.Property<string>("HareketTipi")
                        .HasColumnType("text");

                    b.Property<string>("KasaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Tarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Tutar")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DovizId");

                    b.HasIndex("KasaId");

                    b.ToTable("KasaHareketleri");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Kategori", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KategoriAdi")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Kategoriler");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.KullaniciYorum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KullaniciId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StokId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("YorumMetni")
                        .HasColumnType("text");

                    b.Property<DateTime>("YorumTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("KullaniciId");

                    b.HasIndex("StokId");

                    b.ToTable("KullaniciYorumlari");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Kur", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double?>("AlisKuru")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DovizId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("KurTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("SatisKuru")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DovizId");

                    b.ToTable("Kurlar");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Menu", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<string>("Controller")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Css")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("MenuAdi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Page")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menuler");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Personel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<bool?>("Cinsiyet")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartmanId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gorev")
                        .HasColumnType("text");

                    b.Property<string>("Soyad")
                        .HasColumnType("text");

                    b.Property<string>("SubeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TcNo")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmanId");

                    b.HasIndex("SubeId");

                    b.ToTable("Personeller");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Satis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CariId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PersonelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("SatisTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ToplamTutar")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CariId");

                    b.HasIndex("PersonelId");

                    b.HasIndex("SubeId");

                    b.ToTable("Satislar");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.SatisDetay", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double>("BirimFiyat")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Miktar")
                        .HasColumnType("integer");

                    b.Property<string>("SatisId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StokId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SatisId");

                    b.HasIndex("StokId");

                    b.ToTable("SatisDetaylari");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Siparis", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CariId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Durum")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SiparisTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StokId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CariId");

                    b.HasIndex("StokId");

                    b.ToTable("Siparisler");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.SiparisDetay", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double>("BirimFiyat")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Miktar")
                        .HasColumnType("integer");

                    b.Property<string>("SiparisId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StokId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SiparisId");

                    b.HasIndex("StokId");

                    b.ToTable("SiparisDetay");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Stok", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BirimId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepoId")
                        .HasColumnType("text");

                    b.Property<double>("Fiyat")
                        .HasColumnType("double precision");

                    b.Property<string>("KategoriId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StokAdet")
                        .HasColumnType("integer");

                    b.Property<string>("StokAdi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StokKodu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BirimId");

                    b.HasIndex("DepoId");

                    b.HasIndex("KategoriId");

                    b.ToTable("Stoklar");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.StokBarkod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Barkod")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StokId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StokId");

                    b.ToTable("StokBarkodlari");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.StokFotograf", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FotografYolu")
                        .HasColumnType("text");

                    b.Property<string>("StokId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StokId");

                    b.ToTable("StokFotograflari");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.StokHareket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Adet")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StokId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Tarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepoId");

                    b.HasIndex("StokId");

                    b.ToTable("StokHareketleri");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Sube", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ilce")
                        .HasColumnType("text");

                    b.Property<string>("Sehir")
                        .HasColumnType("text");

                    b.Property<string>("SubeAdi")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Subeler");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Tedarikci", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<string>("Adres")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Telefon")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tedarikciler");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.AppUser", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Personel", "Personel")
                        .WithMany()
                        .HasForeignKey("PersonelId");

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Departman", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Departman", "UstDepartman")
                        .WithMany()
                        .HasForeignKey("UstDepartmanId");

                    b.Navigation("UstDepartman");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Depo", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Sube", "Sube")
                        .WithMany("Depolar")
                        .HasForeignKey("SubeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sube");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Fatura", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Cari", "Cari")
                        .WithMany("Faturalar")
                        .HasForeignKey("CariId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cari");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.FaturaDetay", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Fatura", "Fatura")
                        .WithMany("FaturaDetaylari")
                        .HasForeignKey("FaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Stok", "Stok")
                        .WithMany("FaturaDetaylari")
                        .HasForeignKey("StokId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fatura");

                    b.Navigation("Stok");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Kasa", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Doviz", "Doviz")
                        .WithMany("Kasalar")
                        .HasForeignKey("DovizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doviz");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.KasaHareket", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Doviz", "Doviz")
                        .WithMany("KasaHareketleri")
                        .HasForeignKey("DovizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Kasa", "Kasa")
                        .WithMany("KasaHareketleri")
                        .HasForeignKey("KasaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doviz");

                    b.Navigation("Kasa");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.KullaniciYorum", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.AppUser", "Kullanici")
                        .WithMany("Yorumlar")
                        .HasForeignKey("KullaniciId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Stok", "Stok")
                        .WithMany("KullaniciYorumlari")
                        .HasForeignKey("StokId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kullanici");

                    b.Navigation("Stok");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Kur", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Doviz", "Doviz")
                        .WithMany("Kurlar")
                        .HasForeignKey("DovizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doviz");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Menu", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Menu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Personel", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Departman", "Departman")
                        .WithMany("Personeller")
                        .HasForeignKey("DepartmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Sube", "Sube")
                        .WithMany("Personeller")
                        .HasForeignKey("SubeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departman");

                    b.Navigation("Sube");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Satis", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Cari", "Cari")
                        .WithMany("Satislar")
                        .HasForeignKey("CariId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Personel", "Personel")
                        .WithMany("Satislar")
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Sube", "Sube")
                        .WithMany("Satislar")
                        .HasForeignKey("SubeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cari");

                    b.Navigation("Personel");

                    b.Navigation("Sube");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.SatisDetay", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Satis", "Satis")
                        .WithMany("SatisDetaylari")
                        .HasForeignKey("SatisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Stok", "Stok")
                        .WithMany("SatisDetaylari")
                        .HasForeignKey("StokId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Satis");

                    b.Navigation("Stok");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Siparis", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Cari", "Cari")
                        .WithMany("Siparisler")
                        .HasForeignKey("CariId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Stok", "Stok")
                        .WithMany()
                        .HasForeignKey("StokId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cari");

                    b.Navigation("Stok");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.SiparisDetay", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Siparis", "Siparis")
                        .WithMany("SiparisDetaylari")
                        .HasForeignKey("SiparisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Stok", "Stok")
                        .WithMany("SiparisDetaylari")
                        .HasForeignKey("StokId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Siparis");

                    b.Navigation("Stok");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Stok", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Birim", null)
                        .WithMany("Stoklar")
                        .HasForeignKey("BirimId");

                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Depo", "Depo")
                        .WithMany("Stoklar")
                        .HasForeignKey("DepoId");

                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Kategori", "Kategori")
                        .WithMany("Stoklar")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Depo");

                    b.Navigation("Kategori");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.StokBarkod", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Stok", "Stok")
                        .WithMany("StokBarkodlari")
                        .HasForeignKey("StokId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stok");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.StokFotograf", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Stok", "Stok")
                        .WithMany("StokFotograflari")
                        .HasForeignKey("StokId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stok");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.StokHareket", b =>
                {
                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Depo", "Depo")
                        .WithMany("StokHareketleri")
                        .HasForeignKey("DepoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeknoRoma.Entities.Entities.Concrete.Stok", "Stok")
                        .WithMany("StokHareketleri")
                        .HasForeignKey("StokId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Depo");

                    b.Navigation("Stok");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.AppUser", b =>
                {
                    b.Navigation("Yorumlar");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Birim", b =>
                {
                    b.Navigation("Stoklar");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Cari", b =>
                {
                    b.Navigation("Faturalar");

                    b.Navigation("Satislar");

                    b.Navigation("Siparisler");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Departman", b =>
                {
                    b.Navigation("Personeller");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Depo", b =>
                {
                    b.Navigation("StokHareketleri");

                    b.Navigation("Stoklar");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Doviz", b =>
                {
                    b.Navigation("KasaHareketleri");

                    b.Navigation("Kasalar");

                    b.Navigation("Kurlar");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Fatura", b =>
                {
                    b.Navigation("FaturaDetaylari");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Kasa", b =>
                {
                    b.Navigation("KasaHareketleri");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Kategori", b =>
                {
                    b.Navigation("Stoklar");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Menu", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Personel", b =>
                {
                    b.Navigation("Satislar");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Satis", b =>
                {
                    b.Navigation("SatisDetaylari");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Siparis", b =>
                {
                    b.Navigation("SiparisDetaylari");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Stok", b =>
                {
                    b.Navigation("FaturaDetaylari");

                    b.Navigation("KullaniciYorumlari");

                    b.Navigation("SatisDetaylari");

                    b.Navigation("SiparisDetaylari");

                    b.Navigation("StokBarkodlari");

                    b.Navigation("StokFotograflari");

                    b.Navigation("StokHareketleri");
                });

            modelBuilder.Entity("TeknoRoma.Entities.Entities.Concrete.Sube", b =>
                {
                    b.Navigation("Depolar");

                    b.Navigation("Personeller");

                    b.Navigation("Satislar");
                });
#pragma warning restore 612, 618
        }
    }
}
